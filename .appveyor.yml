stack: python 3.9

branches:
  only:
    - master

# Note that builds run in the order the images are declared
image:
  - Visual Studio 2019

# Define the build configurations
environment:
  GITHUB_API_KEY:
    secure: w1zaTUARBAuhkAKUke5sBvSkVtlDGL8YfQxROzv5oGIynVJImn+KWGFVDxyjQore

  matrix:
    - BUILD_NAME: msvc_windows
      QTDIR: C:\Qt\6.2\msvc2019_64

# Exclude invalid build configurations
matrix:
  exclude:
    - image: Visual Studio 2019
      BUILD_NAME: clang_osx
    - image: Visual Studio 2019
      BUILD_NAME: gcc_linux

configuration:
  - release

# Do configuration-specific build steps
for:

  # Windows MSVC
  - matrix:
      only:
        - image: Visual Studio 2019
          BUILD_NAME: msvc_windows
          
    # Get the project submodules
    # Set the environment variables and paths to make
    install:
      - git submodule update --init --recursive
      - set PATH=%PATH%;C:\Qt\6.2\msvc2019_64\bin
      - call "C:\Qt\6.2\msvc2019_64\bin\qtenv2.bat"
      - call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
      - set make=nmake.exe

    before_build:
      - cd %APPVEYOR_BUILD_FOLDER%

      # Get the Qt installer framework
      - cd scripts
      - appveyor_windows_get_ifw.bat
      - cd %APPVEYOR_BUILD_FOLDER%

      # Run qmake
      - qmake CONFIG+=%CONFIGURATION% installer.pro

    # Build the project
    build_script:
      - cd %APPVEYOR_BUILD_FOLDER%
      - '%make%'
      - ls -a
      - move geometrize_installer.exe geometrize_installer_%APPVEYOR_BUILD_NUMBER%_%APPVEYOR_BUILD_ID%_%BUILD_NAME%_%CONFIGURATION%.exe
      - echo geometrize_installer_%APPVEYOR_BUILD_NUMBER%_%APPVEYOR_BUILD_ID%_%BUILD_NAME%_%CONFIGURATION%.exe > __latest

     # set_public: true
     # folder: windows/%BUILD_NAME%
    after_build:
      - 7z a build.zip %APPVEYOR_BUILD_FOLDER%\*

    artifacts:
      - path: build.zip
        name: Build